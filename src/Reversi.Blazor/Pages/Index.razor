@page "/"
@using Reversi.Blazor.Services
@using Reversi.Core

<PageTitle>Reversi</PageTitle>

<div class="rounded-3 shadow p-5 d-flex flex-column align-items-center justify-content-center">
    <h1>Hello, world!</h1>

    <div class="d-flex">
        <div class="p-5 d-flex flex-column justify-content-center align-items-center">
            <h2>@reversiGame?.Player1.Name</h2>
            <div class="rounded-circle mt-3"
                 style="@($"height:80px;width:80px;background:black;{Border(player1)}")"></div>
        </div>

        <div class="d-flex flex-column mt-3"
             style="border:1px solid rgba(128,128,128,0.6);width:fit-content;">
            @foreach (var y in Enumerable.Range(0, 8)) {
                <div class="d-flex">
                    @foreach (var x in Enumerable.Range(0, 8)) {
                        <div class="cell p-1"
                     @onclick="@(_ => HandleMouseClick(x,y))"
                     @onmouseenter="@(_ => HandleMouseEnter(x,y))">
                            @if (reversiGame?.Board[x, y] is { Piece: Piece.Black }) {
                                <div class="w-100 h-100 rounded-circle bg-black shadow-sm ">
                                </div>
                            }
                            else if (reversiGame?.Board[x, y] is { Piece: Piece.White }) {
                                <div class="w-100 h-100 rounded-circle bg-white shadow-sm">
                                </div>
                            }
                            else if (DoesMatchPreview(x, y)) {
                                @if (CanPlace) {
                                    <div class="w-100 h-100 rounded-circle shadow-sm"
                         style="@($"background:{PreviewStyle};")">
                                    </div>
                                }
                                else {
                                    <div class="w-100 h-100 rounded-circle shadow-sm" style="background:red;">
                                    </div>
                                }
                            }
                        </div>
                    }
                </div>
            }
        </div>

        <div class="p-5 d-flex flex-column justify-content-center align-items-center">
            <h2>@reversiGame?.Player2.Name</h2>
            <div class="rounded-circle mt-3" style="@($"height:80px;width:80px;background:white;border:1px solid black;{Border(player2)}")"></div>
        </div>
    </div>

    <div class="@(reversiGame?.IsGameOvered is false ? "modal fade show":"modal fade show")">
        <div class="modal-dialog modal-dialog-centered">
            <h1>
                GameOver
            </h1>
            <div>
            </div>
            <button class="btn" @onclick="HandleResetClicked">
                もう一度プレイする
            </button>
        </div>
    </div>
</div>

<style>
    .cell {
        width: 40px;
        height: 40px;
        border: 1px solid rgba(128,128,128,0.6);
        background: #a0ad9dfc;
    }

    .preview:hover {
    }

    .preview:hover {
    }
</style>

@code {
    PlayerInteractor? player1;
    PlayerInteractor? player2;
    ReversiGame? reversiGame;
    (Position Position, bool CanPlace)? preview;

    bool CanPlace => this.preview?.CanPlace ?? false;

    Piece Turn => this.reversiGame?.Turn ?? Piece.Empty;

    bool DoesMatchPreview(int x, int y) =>
        new Position(x, y) == (this.preview?.Position ?? default);

    string PreviewStyle => this.Turn switch {
        Piece.Black => "black",
        Piece.White => "white",
        _ => "red",
    };

    protected override void OnInitialized() {
        base.OnInitialized();

        this.player1 = new() {
                Name = "Player1",
            };
        this.player2 = new() {
                Name = "Player2",
            };
        this.reversiGame = new(this.player1, this.player2);
        this.reversiGame.StateChanged += (_, _) => {
            this.StateHasChanged();
        };
        _ = this.reversiGame.StartAsync();
    }

    string Border(PlayerInteractor? player) =>
        this.Turn == player?.Turn ? "border:6px solid red" : "";

    void HandleMouseEnter(int x, int y) {
        if (this.reversiGame is not null) {
            var canPlace = this.reversiGame.Board.CanPlace(
                new(x, y),
                this.reversiGame.Turn
            );
            preview = (new(x, y), canPlace);
        }
    }

    void HandleMouseClick(int x, int y) {
        if (this.player1?.Turn == this.Turn) {
            this.player1.SetInput(new(x, y));
        }
        else if (this.player2?.Turn == this.Turn) {
            this.player2.SetInput(new(x, y));
        }
    }

    async Task HandleResetClicked() {
        await this.reversiGame!.RestartAsync();
    }
}